<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAE0QAABNEAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA35YeAN+YHwTjqyYP57MnGuez
        KCnstC4y7rMsNOmzKS/qryki56woFeSkJAljAAAAgCMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7rQlAO6zJQrqtSku77ktX/K9
        L4/uuy+y7LovyO+8MtHwvTHS7bswz+24L8Dwuy+j9Lwueu61KUjrsCQb5aIcA+enHwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADqrSAA56QVAeuwJA/wuCo88r4tf/C9
        Ls7wvjD69MMz//HCM//uwDP/7b8z/+y/M//tvzP/78Ez//LDM//zwjH/8Lwt7PC6LKzqsypf158lLMaS
        GxrLmSoLzJstAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6LMlAOGtIwLtuCYu9b8pie+9
        K9Hvvi757r8v/+u9L//qvS//6r0v/+q9L//qvS//6r0v/+q9L//qvS//6r0v/+q9L//qvDL/5LM1/+Gy
        RuzhtlzA4LZYp92rPobUny5B07xrB9O1XQAAAAAAAAAAAAAAAAAAAAAA6rceAOOwFwDnsxsG7LQlSPC8
        KL/vvSn167wr/+q8K//puyv/6bsr/+m7K//puyv/6bsr/+m7K//puyv/6bsr/+m7K//quyr/57kw/960
        S//kxH//79ip//Pds//03bD/79GV9+O3XNPWozhm1KdICtWmQgDouncAAAAAAP9/AADrvSEA67geC/C8
        Il/wvCXU7Lsm/um5Jv/puSf/6bkn/+m5J//puSf/6bkn/+m5J//puSf/6bkn/+m5J//puSf/6bkm/+e4
        Kv/ftk3/6c2W//fmyP/25MT/8Nmu//Ldtv/56Mz/89yu/+K8a9bWpkBFsIAAAOK0ZwAAAAAA/38AAOvN
        KQDvux81770hxuq5I//otyL/6Lci/+i3Iv/otyL/6Lci/+i3Iv/otyL/6Lci/+i3Iv/otyL/6Lci/+i3
        Iv/ouCL/4rQ2/+LBfv/3583/+uzW/+3UpP/WqUr/3rps//npzv/67NT/8Neh/961WZvNmzEU06VAAAAA
        AAD/fwAA468aAOKsGSPuuRy36bce/+e2Hv/nth7/57Ye/+e2Hv/nth7/57Ye/+e2Hv/nth7/57Ye/+e2
        Hv/nth7/57Ye/+a2IP/ftEb/7tqx//nr1P/x3rn/5ceH/9KjO//ZsFf/7dan//TkxP/56Mj/4Lll3cuX
        JDXHkxkAAAAAAAAAAADqrBQA6agTBeqyF3ntuBry5rQa/+a0Gv/mtBr/5rQa/+a0Gv/mtBr/5rQa/+a0
        Gv/mtBr/5rQa/+a0Gv/mtBr/5bQe/962UP/158z/9OTE/9u1Yv/Soz7/0J40/8+dMP/QnzT/5cmM//zy
        3//fu2zyzZorQ7d5AAAAAAAAAAAAAAAAAADapBUA2qQVKOyzFcrntBb/5bMX/+WzF//lsxf/5bMX/+Wz
        F//lsxf/5bMX/+WzF//lsxf/5bMX/+WzF//ksxn/3rNH//Pjxf/47tr/6tKf/967bv/RoTj/1alJ/+LD
        gf/v3rj/+/Hd/+C7a+bLlyI6xYoNAAAAAAAAAAAAAAAAAAAAawCqfycB46oQYOqyEufmsRP/5LET/+Sx
        E//ksRP/5LET/+SxE//ksRP/5LET/+SxE//ksRP/5LET/+SxE//ery//5syV//z37v/9+/T/79y1/9Sm
        Q//eu2//+/br//368//047//4LdgrcuVHxzSoDQAAAAAAAAAAAAAAAAAAAAAAOqlCADnpwsQ5qwPlOix
        D/jjrxD/468Q/+OvEP/jrxD/468Q/+OvEP/jrxD/468Q/+OvEP/jrxD/468P/+GuF//dtVL/8OPE//79
        +f/58uT/8OC+//TnzP/++/j/+/Tl/+rKiObYqD1aqJkkAdGpQAAAAAAAAAAAAAAAAAAAAAAA254NAM6Q
        DwHfowws5qsLueevDPvjrgz/464M/+OuDP/jrgz/464M/+OuDP/jrgz/464M/+OuDP/jrgz/464N/9+t
        HP/et1n/7du0//jw4P/79en/+vPl//fpzP3pyYTn3Ks9gsyZJRTTnS0AAP8AAAAAAAAAAAAAAAAAAAAA
        AADIfwgA4KEJANCLCQLhowk15qoJtOWtCvrjrQr/4q0K/+KtCv/irQr/4q0K/+KtCv/irQr/4q0K/+Kt
        Cv/irQn/4q0K/96rFP/crTD/4LdV9+G/c+HhvW/R37RWp9alOVvVoCkU+ME7AMWTJAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADWkgkAz54AADVTAADdoAUu6KoGpuatB+/jrAf+4qwG/+GsBv/hrAb/4awG/+Gs
        Bv/hrAb/4awG/+GsBv/irAf/46wG/emwB+nmrA+a1aEmOtqnShzfplII3rgfAs+ZNwDSoTEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAy4oAAP/8GADbmgQf5qgDcueqBL3kqgTw46sE/+Wt
        BP/krAT/46wE/+StBP/lrQT/46sE/uWrBOzorAS16aoDZd+cAxb//w4A0XcAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANaXAADVlwAJ5KMDK+Wl
        A1vkpgKY5KYBxOGkAdrfpAHg4qYB1+WoAr/kpwKQ5qcDVOOkAyXTlwAG1pkAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADmqQsA56oKA+SpCyvlqwtt5q0Ln+atC7DnrQuY5aoKYuCnCyHepgwBAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA47EXAOazFwbrthZM7roVr+y4FdnpthXr6rYV7um1FentuBXT7roWn+q2FjjhrxcC47AXAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOvHFgDryhQE67kcVfS/HNzptxr957Ua/+a0Gv/mtBr/5rQa/+e1Gv/suRv89L8cyuq3
        HD3zaAAB7KcVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA67siAOq7IjLwvyPD6roi/ui4If/nuCH/57gh/+e4If/nuCH/57gh/+i3
        If/suiL78b4kp+u6Ix7suyMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAO+8MADQxAAA7b0pgu6+Kvfquyr/6bsq/+m7Kv/puyr/6bsq/+m7
        Kv/puyr/6bsp/+u7Kv/uvivr7L0qXPO4LADfyCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7L4zAOq9MxnzxDO57sAx/+u9Mf/rvjH/674x/+u+
        Mf/rvjH/674x/+u+Mf/rvjH/674x/+/BMv/xwzOT3sIyCufDMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsvzkA6r04M/jLPM3xxTr/7cE5/+3B
        Of/twTn/7cE5/+3BOf/twTn/7cE5/+3BOf/twTn/8sY6//fLPK3pwDgb7cM5AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO7BQQDsv0Ex+c5Ey/LI
        Qv/vxEH/78VB/+/FQf/vxUH/78VB/+/FQf/vxUH/78VB/+/EQf/0yUP/+M5Eq+nCPxnuxUAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8MNIAO3A
        RxX3zUuy9MtK//HISf/xyEn/8chJ//HISf/xyEn/8chJ//HISf/xyEn/8chJ//XLSv/1zEmL2740B+nG
        QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD4t1AA9OJTAPXOUXX30VPz9MxR//PLUf/zy1H/88tR//PLUf/zy1H/88tR//PLUf/0zVL/99FS5PPO
        T1L/214AtKMfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP+lVwD50lcA+dJXJvrWXLP301r89c5Z//TOWf/1zln/9c5Z//XOWf/0zln/9c9Z//jU
        W/j51VuX9M5YFvXQWQBpcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/VVAD/1FID+dhgP/vcZL7712P9+NRh//bRYP/20WD/9tFg//nU
        Yv/612P5+ttiqPvbYS3/OMoA/8trAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD612QB/NlmNP7caZT822nQ+91q5/vd
        auv73Grk/NxpyPvbaIP41GQl99NjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPnVZwD4zmQB+dhpEfzg
        bjb/5HBS/eJvW/7ib0/84G0v+thoDPnRZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/yGsA/8VtAP/PZwP5zGYE+MNfAv+8SwD+wFUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/+AD//+AAP/8AAAP+AAAB/AAAAPgAAAD4AAAAeAAAAHgAAAB8AAAAfAA
        AAHwAAAB+AAAA/wAAAf+AAAH/4AA///AAf//8Af//+AD///AAf//wAH//8AB//+AAP//gAD//4AA//+A
        AP//wAH//8AB///AAf//4Af///AH///8H/8=
</value>
  </data>
</root>